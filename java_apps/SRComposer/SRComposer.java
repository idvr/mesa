import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import com.symantec.itools.javax.swing.JToolBarSeparator;
import com.symantec.itools.javax.swing.icons.ImageIcon;

import DICOM.*;
import MESA.*;
import symantec.itools.awt.StatusBar;

/**
 * A basic JFC 1.1 based application.
 */
public class SRComposer extends javax.swing.JFrame
{
    private java.util.Vector mContentItemVector;
    private java.util.Vector mObservationContentVector;
    
	public SRComposer()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
		setTitle("JFC Application");
		setJMenuBar(JMenuBar1);
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(770,779);
		setVisible(false);
		String imageBase = System.getProperty("MESA.runtime");
		try {
			newIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("file:///" + imageBase + "/gif/new.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ newIcon.move(156,780);
		try {
			openIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("file:///" + imageBase + "/gif/open.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ openIcon.move(132,780);
		try {
			saveIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("file:///" + imageBase + "/gif/save.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ saveIcon.move(108,780);
		try {
			cutIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("file:///" + imageBase + "/gif/cut.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ cutIcon.move(84,780);
		try {
			copyIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("file:///" + imageBase + "/gif/copy.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ copyIcon.move(60,780);
		try {
			pasteIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("file:///" + imageBase + "/gif/paste.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ pasteIcon.move(36,780);
		try {
			aboutIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL("file:///" + imageBase + "/gif/about.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ aboutIcon.move(12,780);
		saveFileDialog.setMode(FileDialog.SAVE);
		saveFileDialog.setTitle("Save");
		//$$ saveFileDialog.move(36,804);
		openFileDialog.setMode(FileDialog.LOAD);
		openFileDialog.setTitle("Open");
		//$$ openFileDialog.move(12,804);
		JPanel2.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
		getContentPane().add(BorderLayout.NORTH, JPanel2);
		JPanel2.setBounds(0,0,770,33);
		JToolBar1.setAlignmentY(0.222222F);
		JPanel2.add(JToolBar1);
		JToolBar1.setBounds(0,0,395,33);
		newButton.setDefaultCapable(false);
		newButton.setToolTipText("Create a new document");
		newButton.setMnemonic((int)'N');
		JToolBar1.add(newButton);
		newButton.setBounds(16,4,51,27);
		openButton.setDefaultCapable(false);
		openButton.setToolTipText("Open an existing document");
		openButton.setMnemonic((int)'O');
		JToolBar1.add(openButton);
		openButton.setBounds(67,4,51,27);
		saveButton.setDefaultCapable(false);
		saveButton.setToolTipText("Save the active document");
		saveButton.setMnemonic((int)'S');
		JToolBar1.add(saveButton);
		saveButton.setBounds(118,4,51,27);
		JToolBar1.add(JToolBarSeparator1);
		JToolBarSeparator1.setBounds(169,2,10,5);
		cutButton.setDefaultCapable(false);
		cutButton.setToolTipText("Cut the selection and put it on the Clipboard");
		cutButton.setMnemonic((int)'T');
		JToolBar1.add(cutButton);
		cutButton.setBounds(179,4,51,27);
		copyButton.setDefaultCapable(false);
		copyButton.setToolTipText("Copy the selection and put it on the Clipboard");
		copyButton.setMnemonic((int)'C');
		JToolBar1.add(copyButton);
		copyButton.setBounds(230,4,51,27);
		pasteButton.setDefaultCapable(false);
		pasteButton.setToolTipText("Insert Clipboard contents");
		pasteButton.setMnemonic((int)'P');
		JToolBar1.add(pasteButton);
		pasteButton.setBounds(281,4,51,27);
		JToolBar1.add(JToolBarSeparator2);
		JToolBarSeparator2.setBounds(332,2,10,5);
		aboutButton.setDefaultCapable(false);
		aboutButton.setToolTipText("Display program information, version number and copyright");
		aboutButton.setMnemonic((int)'A');
		JToolBar1.add(aboutButton);
		aboutButton.setBounds(342,4,51,27);
		JPanel1.setLayout(null);
		getContentPane().add(BorderLayout.CENTER, JPanel1);
		JPanel1.setBounds(0,33,770,746);
		JTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
		JPanel1.add(JTabbedPane1);
		JTabbedPane1.setBounds(36,15,686,640);
		PatientModulePanel.setLayout(null);
		JTabbedPane1.add(PatientModulePanel);
		PatientModulePanel.setBounds(2,2,681,610);
		PatientModulePanel.setVisible(false);
		PatientModulePanel.add(PatientNameText);
		PatientNameText.setBounds(310,46,337,34);
		PatientModulePanel.add(PatientIDText);
		PatientIDText.setBounds(310,118,337,34);
		PatientModulePanel.add(PatientDOBText);
		PatientDOBText.setBounds(310,178,337,34);
		PatientModulePanel.add(PatientSexText);
		PatientSexText.setBounds(310,238,337,34);
		JLabel1.setText("Name");
		PatientModulePanel.add(JLabel1);
		JLabel1.setBounds(130,46,84,24);
		JLabel2.setText("ID");
		PatientModulePanel.add(JLabel2);
		JLabel2.setBounds(130,118,84,24);
		JLabel3.setText("DOB");
		PatientModulePanel.add(JLabel3);
		JLabel3.setBounds(130,178,84,24);
		JLabel4.setText("Sex");
		PatientModulePanel.add(JLabel4);
		JLabel4.setBounds(130,238,84,24);
		GeneralStudyModulePanel.setLayout(null);
		JTabbedPane1.add(GeneralStudyModulePanel);
		GeneralStudyModulePanel.setBounds(2,2,681,610);
		GeneralStudyModulePanel.setVisible(false);
		GeneralStudyModulePanel.add(StudyInstanceUIDText);
		StudyInstanceUIDText.setBounds(262,34,404,36);
		GeneralStudyModulePanel.add(StudyDateText);
		StudyDateText.setBounds(262,84,404,36);
		GeneralStudyModulePanel.add(StudyTimeText);
		StudyTimeText.setBounds(262,134,404,36);
		GeneralStudyModulePanel.add(ReferringPhysicianText);
		ReferringPhysicianText.setBounds(262,184,404,36);
		GeneralStudyModulePanel.add(StudyIDText);
		StudyIDText.setBounds(262,234,404,36);
		GeneralStudyModulePanel.add(AccessionNumberText);
		AccessionNumberText.setBounds(262,284,404,36);
		JLabel5.setText("Study Instance UID");
		GeneralStudyModulePanel.add(JLabel5);
		JLabel5.setBounds(82,46,120,30);
		JLabel6.setText("Study Date");
		GeneralStudyModulePanel.add(JLabel6);
		JLabel6.setBounds(82,94,120,30);
		JLabel7.setText("Study Time");
		GeneralStudyModulePanel.add(JLabel7);
		JLabel7.setBounds(82,142,120,30);
		JLabel8.setText("Referring Physician");
		GeneralStudyModulePanel.add(JLabel8);
		JLabel8.setBounds(82,178,120,30);
		JLabel9.setText("Study ID");
		GeneralStudyModulePanel.add(JLabel9);
		JLabel9.setBounds(82,226,120,30);
		JLabel10.setText("Accession Number");
		GeneralStudyModulePanel.add(JLabel10);
		JLabel10.setBounds(82,284,120,30);
		SRSeriesModulePanel.setLayout(null);
		JTabbedPane1.add(SRSeriesModulePanel);
		SRSeriesModulePanel.setBounds(2,2,681,610);
		SRSeriesModulePanel.setVisible(false);
		SRSeriesModulePanel.add(ModalityText);
		ModalityText.setBounds(298,58,359,39);
		SRSeriesModulePanel.add(SeriesInstanceUIDText);
		SeriesInstanceUIDText.setBounds(298,118,359,39);
		SRSeriesModulePanel.add(SeriesNumberText);
		SeriesNumberText.setBounds(298,178,359,39);
		JLabel11.setText("Modality");
		SRSeriesModulePanel.add(JLabel11);
		JLabel11.setBounds(70,70,72,24);
		JLabel12.setText("Series Instance UID");
		SRSeriesModulePanel.add(JLabel12);
		JLabel12.setBounds(70,130,120,24);
		JLabel13.setText("Series Number");
		SRSeriesModulePanel.add(JLabel13);
		JLabel13.setBounds(70,190,108,24);
		GeneralEquipmentModulePanel.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JTabbedPane1.add(GeneralEquipmentModulePanel);
		GeneralEquipmentModulePanel.setBounds(2,2,681,610);
		GeneralEquipmentModulePanel.setVisible(false);
		SRDocumentGeneralPanel.setLayout(null);
		JTabbedPane1.add(SRDocumentGeneralPanel);
		SRDocumentGeneralPanel.setBounds(2,2,681,610);
		SRDocumentGeneralPanel.setVisible(false);
		JLabel14.setText("Instance Number");
		SRDocumentGeneralPanel.add(JLabel14);
		JLabel14.setBounds(46,22,116,20);
		JLabel15.setText("Completion Flag");
		SRDocumentGeneralPanel.add(JLabel15);
		JLabel15.setBounds(46,59,116,20);
		JLabel16.setText("Verification Flag");
		SRDocumentGeneralPanel.add(JLabel16);
		JLabel16.setBounds(46,96,116,20);
		JLabel17.setText("Content Date");
		SRDocumentGeneralPanel.add(JLabel17);
		JLabel17.setBounds(46,133,116,20);
		JLabel18.setText("Content Time");
		SRDocumentGeneralPanel.add(JLabel18);
		JLabel18.setBounds(46,170,116,20);
		JLabel19.setText("Verifying Observer");
		SRDocumentGeneralPanel.add(JLabel19);
		JLabel19.setBounds(46,207,116,20);
		JLabel20.setText("Value");
		SRDocumentGeneralPanel.add(JLabel20);
		JLabel20.setBounds(82,250,80,14);
		JLabel21.setText("Designator");
		SRDocumentGeneralPanel.add(JLabel21);
		JLabel21.setBounds(82,286,80,15);
		JLabel22.setText("Meaning");
		SRDocumentGeneralPanel.add(JLabel22);
		JLabel22.setBounds(82,322,80,16);
		JLabel23.setText("Verifying Organization");
		SRDocumentGeneralPanel.add(JLabel23);
		JLabel23.setBounds(46,355,132,24);
		JLabel24.setText("Verification Date Time");
		SRDocumentGeneralPanel.add(JLabel24);
		JLabel24.setBounds(46,396,132,24);
		JLabel25.setText("Predecessor Doc Seq");
		SRDocumentGeneralPanel.add(JLabel25);
		JLabel25.setBounds(46,437,132,24);
		JLabel26.setText("Identical Doc Seq");
		SRDocumentGeneralPanel.add(JLabel26);
		JLabel26.setBounds(46,478,116,20);
		SRDocumentGeneralPanel.add(InstanceNumberText);
		InstanceNumberText.setBounds(298,22,160,20);
		SRDocumentGeneralPanel.add(CompletionFlagText);
		CompletionFlagText.setBounds(298,59,160,20);
		SRDocumentGeneralPanel.add(VerificationFlagText);
		VerificationFlagText.setBounds(298,96,160,20);
		SRDocumentGeneralPanel.add(ContentDateText);
		ContentDateText.setBounds(298,133,160,20);
		SRDocumentGeneralPanel.add(ContentTimeText);
		ContentTimeText.setBounds(298,170,160,20);
		SRDocumentGeneralPanel.add(VerifyingObserverText);
		VerifyingObserverText.setBounds(298,207,160,20);
		SRDocumentGeneralPanel.add(VerifyingObserver_ValueText);
		VerifyingObserver_ValueText.setBounds(334,250,160,20);
		SRDocumentGeneralPanel.add(VerifyingObserver_DesignatorText);
		VerifyingObserver_DesignatorText.setBounds(334,286,160,20);
		SRDocumentGeneralPanel.add(VerifyingObserver_MeaningText);
		VerifyingObserver_MeaningText.setBounds(334,322,160,20);
		SRDocumentGeneralPanel.add(VerifyingOrganizationText);
		VerifyingOrganizationText.setBounds(298,355,160,20);
		SRDocumentGeneralPanel.add(VerificationDateTimeText);
		VerificationDateTimeText.setBounds(298,396,160,20);
		SRDocumentContentPanel.setLayout(null);
		JTabbedPane1.add(SRDocumentContentPanel);
		SRDocumentContentPanel.setBounds(2,2,681,610);
		SRDocumentContentPanel.setVisible(false);
		JLabel27.setText("Document Title");
		SRDocumentContentPanel.add(JLabel27);
		JLabel27.setBounds(130,34,96,12);
		SRDocumentContentPanel.add(DocumentTitleCombo);
		DocumentTitleCombo.setBounds(274,22,292,33);
		JLabel28.setText("Recording Observer");
		SRDocumentContentPanel.add(JLabel28);
		JLabel28.setBounds(130,106,124,29);
		SRDocumentContentPanel.add(RecordingObserverText);
		RecordingObserverText.setBounds(274,106,281,25);
		JButton1.setText("Simple Image");
		JButton1.setActionCommand("Simple Image");
		SRDocumentContentPanel.add(JButton1);
		JButton1.setBounds(154,178,125,38);
		SOPCommonPanel.setLayout(null);
		JTabbedPane1.add(SOPCommonPanel);
		SOPCommonPanel.setBounds(2,2,681,610);
		SOPCommonPanel.setVisible(false);
		JLabel29.setText("SOP Class UID");
		SOPCommonPanel.add(JLabel29);
		JLabel29.setBounds(70,58,108,29);
		JLabel30.setText("SOP Instance UID");
		SOPCommonPanel.add(JLabel30);
		JLabel30.setBounds(70,106,108,29);
		SOPCommonPanel.add(SOPClassUIDCombo);
		SOPClassUIDCombo.setBounds(286,58,330,26);
		SOPCommonPanel.add(SOPInstanceUIDText);
		SOPInstanceUIDText.setBounds(286,106,330,26);
		JTabbedPane1.setSelectedComponent(PatientModulePanel);
		JTabbedPane1.setSelectedIndex(0);
		JTabbedPane1.setTitleAt(0,"Patient");
		JTabbedPane1.setTitleAt(1,"General Study");
		JTabbedPane1.setTitleAt(2,"SR Document Series");
		JTabbedPane1.setTitleAt(3,"General Equip");
		JTabbedPane1.setTitleAt(4,"SR Doc General");
		JTabbedPane1.setTitleAt(5,"SR Doc Content");
		JTabbedPane1.setTitleAt(6,"SOP Common");
		//$$ JMenuBar1.move(180,780);
		fileMenu.setText("File");
		fileMenu.setActionCommand("File");
		fileMenu.setMnemonic((int)'F');
		JMenuBar1.add(fileMenu);
		newItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.Event.CTRL_MASK));
		newItem.setText("New");
		newItem.setActionCommand("New");
		newItem.setMnemonic((int)'N');
		fileMenu.add(newItem);
		openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.Event.CTRL_MASK));
		openItem.setText("Open...");
		openItem.setActionCommand("Open...");
		openItem.setMnemonic((int)'O');
		fileMenu.add(openItem);
		saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.Event.CTRL_MASK));
		saveItem.setText("Save");
		saveItem.setActionCommand("Save");
		saveItem.setMnemonic((int)'S');
		fileMenu.add(saveItem);
		saveAsItem.setText("Save As...");
		saveAsItem.setActionCommand("Save As...");
		saveAsItem.setMnemonic((int)'A');
		fileMenu.add(saveAsItem);
		fileMenu.add(JSeparator1);
		exitItem.setText("Exit");
		exitItem.setActionCommand("Exit");
		exitItem.setMnemonic((int)'X');
		fileMenu.add(exitItem);
		editMenu.setText("Edit");
		editMenu.setActionCommand("Edit");
		editMenu.setMnemonic((int)'E');
		JMenuBar1.add(editMenu);
		cutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.Event.CTRL_MASK));
		cutItem.setText("Cut");
		cutItem.setActionCommand("Cut");
		cutItem.setMnemonic((int)'T');
		editMenu.add(cutItem);
		copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.Event.CTRL_MASK));
		copyItem.setText("Copy");
		copyItem.setActionCommand("Copy");
		copyItem.setMnemonic((int)'C');
		editMenu.add(copyItem);
		pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.Event.CTRL_MASK));
		pasteItem.setText("Paste");
		pasteItem.setActionCommand("Paste");
		pasteItem.setMnemonic((int)'P');
		editMenu.add(pasteItem);
		helpMenu.setText("Help");
		helpMenu.setActionCommand("Help");
		helpMenu.setMnemonic((int)'H');
		JMenuBar1.add(helpMenu);
		aboutItem.setText("About...");
		aboutItem.setActionCommand("About...");
		aboutItem.setMnemonic((int)'A');
		helpMenu.add(aboutItem);
		newItem.setIcon(newIcon);
		openItem.setIcon(openIcon);
		pasteButton.setIcon(pasteIcon);
		aboutButton.setIcon(aboutIcon);
		cutItem.setIcon(cutIcon);
		saveItem.setIcon(saveIcon);
		cutButton.setIcon(cutIcon);
		pasteItem.setIcon(pasteIcon);
		aboutItem.setIcon(aboutIcon);
		saveButton.setIcon(saveIcon);
		copyItem.setIcon(copyIcon);
		newButton.setIcon(newIcon);
		openButton.setIcon(openIcon);
		copyButton.setIcon(copyIcon);
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		openItem.addActionListener(lSymAction);
		saveItem.addActionListener(lSymAction);
		exitItem.addActionListener(lSymAction);
		aboutItem.addActionListener(lSymAction);
		openButton.addActionListener(lSymAction);
		saveButton.addActionListener(lSymAction);
		aboutButton.addActionListener(lSymAction);
		SymMouse aSymMouse = new SymMouse();
		JButton1.addMouseListener(aSymMouse);
		//}}
		initSRContent();
		initSOPCommon();
	}

    /**
     * Creates a new instance of JFrame1 with the given title.
     * @param sTitle the title for the new frame.
     * @see #JFrame1()
     */
	public SRComposer(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	/**
	 * The entry point for this application.
	 * Sets the Look and Feel to the System Look and Feel.
	 * Creates a new JFrame1 and makes it visible.
	 */
	static public void main(String args[])
	{
		try {
		    // Add the following code if you want the Look and Feel
		    // to be set to the Look and Feel of the native system.
		    
		    try {
		        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		    } 
		    catch (Exception e) { 
		    }
		    

			//Create a new instance of our application's frame, and make it visible.
			(new SRComposer()).setVisible(true);
		} 
		catch (Throwable t) {
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}

    /**
     * Notifies this component that it has been added to a container
     * This method should be called by <code>Container.add</code>, and 
     * not by user code directly.
     * Overridden here to adjust the size of the frame if needed.
     * @see java.awt.Container#removeNotify
     */
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();
		
		super.addNotify();
		
		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;
		
		// Adjust size of frame according to the insets and menu bar
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
		    menuBarHeight = menuBar.getPreferredSize().height;
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	com.symantec.itools.javax.swing.icons.ImageIcon newIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon openIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon saveIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon cutIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon copyIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon pasteIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon aboutIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	java.awt.FileDialog saveFileDialog = new java.awt.FileDialog(this);
	java.awt.FileDialog openFileDialog = new java.awt.FileDialog(this);
	javax.swing.JPanel JPanel2 = new javax.swing.JPanel();
	javax.swing.JToolBar JToolBar1 = new javax.swing.JToolBar();
	javax.swing.JButton newButton = new javax.swing.JButton();
	javax.swing.JButton openButton = new javax.swing.JButton();
	javax.swing.JButton saveButton = new javax.swing.JButton();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator1 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JButton cutButton = new javax.swing.JButton();
	javax.swing.JButton copyButton = new javax.swing.JButton();
	javax.swing.JButton pasteButton = new javax.swing.JButton();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator2 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JButton aboutButton = new javax.swing.JButton();
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JTabbedPane JTabbedPane1 = new javax.swing.JTabbedPane();
	javax.swing.JPanel PatientModulePanel = new javax.swing.JPanel();
	javax.swing.JTextField PatientNameText = new javax.swing.JTextField();
	javax.swing.JTextField PatientIDText = new javax.swing.JTextField();
	javax.swing.JTextField PatientDOBText = new javax.swing.JTextField();
	javax.swing.JTextField PatientSexText = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JPanel GeneralStudyModulePanel = new javax.swing.JPanel();
	javax.swing.JTextField StudyInstanceUIDText = new javax.swing.JTextField();
	javax.swing.JTextField StudyDateText = new javax.swing.JTextField();
	javax.swing.JTextField StudyTimeText = new javax.swing.JTextField();
	javax.swing.JTextField ReferringPhysicianText = new javax.swing.JTextField();
	javax.swing.JTextField StudyIDText = new javax.swing.JTextField();
	javax.swing.JTextField AccessionNumberText = new javax.swing.JTextField();
	javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel10 = new javax.swing.JLabel();
	javax.swing.JPanel SRSeriesModulePanel = new javax.swing.JPanel();
	javax.swing.JTextField ModalityText = new javax.swing.JTextField();
	javax.swing.JTextField SeriesInstanceUIDText = new javax.swing.JTextField();
	javax.swing.JTextField SeriesNumberText = new javax.swing.JTextField();
	javax.swing.JLabel JLabel11 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel12 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel13 = new javax.swing.JLabel();
	javax.swing.JPanel GeneralEquipmentModulePanel = new javax.swing.JPanel();
	javax.swing.JPanel SRDocumentGeneralPanel = new javax.swing.JPanel();
	javax.swing.JLabel JLabel14 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel15 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel16 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel17 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel18 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel19 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel20 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel21 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel22 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel23 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel24 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel25 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel26 = new javax.swing.JLabel();
	javax.swing.JTextField InstanceNumberText = new javax.swing.JTextField();
	javax.swing.JTextField CompletionFlagText = new javax.swing.JTextField();
	javax.swing.JTextField VerificationFlagText = new javax.swing.JTextField();
	javax.swing.JTextField ContentDateText = new javax.swing.JTextField();
	javax.swing.JTextField ContentTimeText = new javax.swing.JTextField();
	javax.swing.JTextField VerifyingObserverText = new javax.swing.JTextField();
	javax.swing.JTextField VerifyingObserver_ValueText = new javax.swing.JTextField();
	javax.swing.JTextField VerifyingObserver_DesignatorText = new javax.swing.JTextField();
	javax.swing.JTextField VerifyingObserver_MeaningText = new javax.swing.JTextField();
	javax.swing.JTextField VerifyingOrganizationText = new javax.swing.JTextField();
	javax.swing.JTextField VerificationDateTimeText = new javax.swing.JTextField();
	javax.swing.JPanel SRDocumentContentPanel = new javax.swing.JPanel();
	javax.swing.JLabel JLabel27 = new javax.swing.JLabel();
	javax.swing.JComboBox DocumentTitleCombo = new javax.swing.JComboBox();
	javax.swing.JLabel JLabel28 = new javax.swing.JLabel();
	javax.swing.JTextField RecordingObserverText = new javax.swing.JTextField();
	javax.swing.JButton JButton1 = new javax.swing.JButton();
	javax.swing.JPanel SOPCommonPanel = new javax.swing.JPanel();
	javax.swing.JLabel JLabel29 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel30 = new javax.swing.JLabel();
	javax.swing.JComboBox SOPClassUIDCombo = new javax.swing.JComboBox();
	javax.swing.JTextField SOPInstanceUIDText = new javax.swing.JTextField();
	javax.swing.JMenuBar JMenuBar1 = new javax.swing.JMenuBar();
	javax.swing.JMenu fileMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem newItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem openItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem saveItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem saveAsItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator1 = new javax.swing.JSeparator();
	javax.swing.JMenuItem exitItem = new javax.swing.JMenuItem();
	javax.swing.JMenu editMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem cutItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem copyItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem pasteItem = new javax.swing.JMenuItem();
	javax.swing.JMenu helpMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem aboutItem = new javax.swing.JMenuItem();
	//}}

	//{{DECLARE_MENUS
	//}}

	void exitApplication()
	{
		try {
	    	// Beep
	    	Toolkit.getDefaultToolkit().beep();
	    	// Show a confirmation dialog
	    	int reply = JOptionPane.showConfirmDialog(this, 
	    	                                          "Do you really want to exit?", 
	    	                                          "JFC Application - Exit" , 
	    	                                          JOptionPane.YES_NO_OPTION, 
	    	                                          JOptionPane.QUESTION_MESSAGE);
			// If the confirmation was affirmative, handle exiting.
			if (reply == JOptionPane.YES_OPTION)
			{
		    	this.setVisible(false);    // hide the Frame
		    	this.dispose();            // free the system resources
		    	System.exit(0);            // close the application
			}
		} catch (Exception e) {
		}
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == SRComposer.this)
				SRComposer_windowClosing(event);
		}
	}

	void SRComposer_windowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		SRComposer_windowClosing_Interaction1(event);
	}

	void SRComposer_windowClosing_Interaction1(java.awt.event.WindowEvent event) {
		try {
			this.exitApplication();
		} catch (Exception e) {
		}
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == openItem)
				openItem_actionPerformed(event);
			else if (object == saveItem)
				saveItem_actionPerformed(event);
			else if (object == exitItem)
				exitItem_actionPerformed(event);
			else if (object == aboutItem)
				aboutItem_actionPerformed(event);
			else if (object == openButton)
				openButton_actionPerformed(event);
			else if (object == saveButton)
				saveButton_actionPerformed(event);
			else if (object == aboutButton)
				aboutButton_actionPerformed(event);
		}
	}

	void openItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openItem_actionPerformed_Interaction1(event);
	}

	void openItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// openFileDialog Show the FileDialog
			openFileDialog.setVisible(true);
		} catch (Exception e) {
		}
	}

	void saveItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		saveItem_actionPerformed_Interaction1(event);
	}

	void saveItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// saveFileDialog Show the FileDialog
			saveFileDialog.setVisible(true);
		} catch (Exception e) {
		}
	}

	void exitItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitItem_actionPerformed_Interaction1(event);
	}

	void exitItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			this.exitApplication();
		} catch (Exception e) {
		}
	}

	void aboutItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutItem_actionPerformed_Interaction1(event);
	}

	void aboutItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (Exception e) {
		}
	}
	
	void openButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openButton_actionPerformed_Interaction1(event);
	}

	void openButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// openFileDialog Show the FileDialog
			openFileDialog.setVisible(true);
		} catch (Exception e) {
		}
		String s = openFileDialog.getFile();
		DICOM.DICOMWrapper w = new DICOM.DICOMWrapper(s);
		DICOM.SR.StructuredReport rpt = new DICOM.SR.StructuredReport();
		DICOM.InfoObj.CompositeFactory factory = new DICOM.InfoObj.CompositeFactory();
		factory.inflateStructuredReport(rpt, w);
		MESA.Visual.CompositePainter painter = new MESA.Visual.CompositePainter();
		painter.paintPatientModule(PatientNameText, PatientIDText, PatientDOBText,
		                           PatientSexText, rpt);
		painter.paintGeneralStudyModule(
		            StudyInstanceUIDText, StudyDateText, StudyTimeText,
		            ReferringPhysicianText, StudyIDText, AccessionNumberText,
		            rpt);
		painter.paintSRDocumentSeriesModule(
		            ModalityText, SeriesInstanceUIDText, SeriesNumberText,
		            rpt);
	}

	void saveButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		saveButton_actionPerformed_Interaction1(event);
	}

	void saveButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// saveFileDialog Show the FileDialog
			saveFileDialog.setVisible(true);
		} catch (Exception e) {
		}
		String s = saveFileDialog.getFile();
		if (s == null) {
		    return;
		}
		DICOM.InfoObj.CompositeFactory factory = new DICOM.InfoObj.CompositeFactory( );
		DICOM.SR.StructuredReport rpt = new DICOM.SR.StructuredReport();
        setPatientModule(factory, rpt);
        setGeneralStudyModule(factory, rpt);
        setSOPCommon(factory, rpt);
        setSRDocumentSeriesModule(factory, rpt);
        setSRDocumentGeneralModule(factory, rpt);
        setSRDocumentContentModule(factory, rpt);
        rpt.writeFile(s);
	}

	void aboutButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutButton_actionPerformed_Interaction1(event);
	}

	void aboutButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (Exception e) {
		}
	}
	
	void setPatientModule(DICOM.InfoObj.CompositeFactory factory, DICOM.DICOMWrapper c) {
   		String s1 = PatientNameText.getText( );
        String s2 = PatientIDText.getText( );
        String s3 = PatientDOBText.getText( );
        String s4 = PatientSexText.getText( );
		DICOM.Module.PatientModule patient =
		    new DICOM.Module.PatientModule(s1, s2, s3, s4);
		factory.setPatientModule(c, patient);
	}
	void setGeneralStudyModule(DICOM.InfoObj.CompositeFactory factory, DICOM.DICOMWrapper c) {
	    String s1 = StudyInstanceUIDText.getText( );
	    String s2 = StudyDateText.getText( );
	    String s3 = StudyTimeText.getText( );
	    String s4 = ReferringPhysicianText.getText( );
	    String s5 = StudyIDText.getText( );
	    String s6 = AccessionNumberText.getText( );
	    DICOM.Module.GeneralStudyModule study =
	        new DICOM.Module.GeneralStudyModule(s1, s2, s3, s4, s5, s6);
	    factory.setGeneralStudyModule(c, study);
	}
	void setSOPCommon(DICOM.InfoObj.CompositeFactory factory, DICOM.DICOMWrapper c)
	{
        String s1 = (String)SOPClassUIDCombo.getSelectedItem();
	    if (s1 == null) {
	        System.out.println("You need to specify an SOP Class");
	    }
	    DICOM.Code.CodeManager mgr = new DICOM.Code.CodeManager();
	    DICOM.Code.CodeItem item = mgr.matchMeaning(s1, "sr/sop_class.txt");
	    if (item == null) {
	        System.out.println("Could not match SOP Class for string: " + s1);
	    }
        s1 = item.codeValue();        
        
        String s2 = SOPInstanceUIDText.getText();
        DICOM.Module.SOPCommonModule sopCommon =
            new DICOM.Module.SOPCommonModule(s1, s2);
        factory.setSOPCommonModule(c, sopCommon);
 
	}
	void setSRDocumentSeriesModule(DICOM.InfoObj.CompositeFactory factory,
	                               DICOM.SR.StructuredReport rpt) {
	    String s1 = ModalityText.getText( );
	    String s2 = SeriesInstanceUIDText.getText( );
	    String s3 = SeriesNumberText.getText( );
	    DICOM.Module.SRDocumentSeriesModule series =
	        new DICOM.Module.SRDocumentSeriesModule(s1, s2, s3);
	    factory.setSRDocumentSeriesModule(rpt, series);
    }
	void setSRDocumentGeneralModule(DICOM.InfoObj.CompositeFactory factory,
	                               DICOM.SR.StructuredReport rpt) {
	    String s1 = InstanceNumberText.getText( );
	    String s2 = CompletionFlagText.getText( );
	    String s3 = VerificationFlagText.getText( );
	    String s4 = ContentDateText.getText( );
	    String s5 = ContentTimeText.getText( );
	    String s6 = VerifyingObserverText.getText( );
	    String s7 = VerifyingObserver_ValueText.getText( );
	    String s8 = VerifyingObserver_DesignatorText.getText( );
	    String s9 = VerifyingObserver_MeaningText.getText( );
	    String s10 = VerifyingOrganizationText.getText( );
	    String s11 = VerificationDateTimeText.getText( );
	    
	    DICOM.Module.SRDocumentGeneralModule m1 =
	        new DICOM.Module.SRDocumentGeneralModule(s1, s2, s3, s4, s5, s6,
	            s7, s8, s9, s10, s11);
	    factory.setSRDocumentGeneralModule(rpt, m1);
    }
    void setSRDocumentContentModule(DICOM.InfoObj.CompositeFactory factory,
	                        DICOM.SR.StructuredReport rpt) {
	    String docTitle = (String)DocumentTitleCombo.getSelectedItem();
	    if (docTitle == null)
	        return;
	    DICOM.Code.CodeManager mgr = new DICOM.Code.CodeManager();
	    DICOM.Code.CodeItem item = mgr.matchMeaning(docTitle, "sr/doc_title.txt");
	    if (item == null) {
	        return;
	    }

	    DICOM.Module.SRDocumentContentModule m =
	            new DICOM.Module.SRDocumentContentModule(item);

	    DICOM.SR.ContentItemFactory contentFactory =
	        new DICOM.SR.ContentItemFactory();
	        
	    int i = 0;
	    System.out.println("In SR Composer, content item vector: " +
	        mContentItemVector.size());
	        
	    for (i = 0; i < mContentItemVector.size(); i++) {
	        DICOM.SR.ContentItem contentItem =
	            (DICOM.SR.ContentItem)mContentItemVector.elementAt(i);
	        m.addContentItem(contentItem);
	    }
	    //{
	        //String recordingObserver = RecordingObserverText.getText();
	        //DICOM.Code.CodeItem codeItem =
	            //new DICOM.Code.CodeItem("A100", "Recording Observer", "MESA");
	        //DICOM.SR.ContentItem contentItem =
	            //contentFactory.producePName(codeItem, recordingObserver);
	        //m.addContentItem(contentItem);
	    //}
	    factory.setSRDocumentContentModule(rpt, m);
    }
    
    void initSRContent( ) {
        DICOM.Code.CodeManager m = new DICOM.Code.CodeManager();
        java.util.Vector v = m.readCodeTable("sr/doc_title.txt");
        int i = 0;
        for (i = 0; i < v.size(); i++) {
            DICOM.Code.CodeItem item = (DICOM.Code.CodeItem)v.elementAt(i);
            DocumentTitleCombo.insertItemAt(item.codeMeaning(), i);
        }
        mContentItemVector = new java.util.Vector(1,1);
    }
    void initSOPCommon( ) {
        DICOM.Code.CodeManager m = new DICOM.Code.CodeManager();
        java.util.Vector v = m.readCodeTable("sr/sop_class.txt");
        int i = 0;
        for (i = 0; i < v.size(); i++) {
            DICOM.Code.CodeItem item = (DICOM.Code.CodeItem)v.elementAt(i);
            SOPClassUIDCombo.insertItemAt(item.codeMeaning(), i);
        }
    }

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseClicked(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == JButton1)
				JButton1_mouseClicked(event);
		}
	}

	void JButton1_mouseClicked(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
			 
		JButton1_mouseClicked_Interaction1(event);
	}

	void JButton1_mouseClicked_Interaction1(java.awt.event.MouseEvent event)
	{
		try {
			// SimpleImageContent Create with title, show as non-modal
			{
				SimpleImageContent SimpleImageContent1 = new SimpleImageContent();
				SimpleImageContent1.setModal(false);
				SimpleImageContent1.setTitle("Simple Image Content");
				SimpleImageContent1.show();
				SimpleImageContent1.setParentVector(mContentItemVector);
			}
		} catch (java.lang.Exception e) {
		}
	}
}
