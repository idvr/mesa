import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import com.symantec.itools.javax.swing.JToolBarSeparator;
import com.symantec.itools.javax.swing.icons.ImageIcon;

import PatientModulePanel;
import GeneralStudyModulePanel;
import SRDocumentSeriesModulePanel;
import SOPCommonModulePanel;
import GeneralEquipmentModulePanel;
import IHEY2ObsContextPanel;
import SRDocumentGeneralModulePanel;
import DICOM.*;

import KeyImageContent;
/**
 * A basic JFC 1.1 based application.
 */
public class KeyImageNote extends javax.swing.JFrame
{
    PatientModulePanel mPatientModulePanel;
    GeneralStudyModulePanel mGeneralStudyModulePanel;
    SRDocumentSeriesModulePanel mSRDocumentSeriesModulePanel;
    SOPCommonModulePanel mSOPCommonModulePanel;
    GeneralEquipmentModulePanel mGeneralEquipmentModulePanel;
    SRDocumentGeneralModulePanel mSRDocumentGeneralModulePanel;
    KeyImageContent mKeyImageContent;
    IHEY2ObsContextPanel mIHEY2ObsContextPanel;
    
	public KeyImageNote(String args[])
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
		setTitle("Key Image Note");
		setJMenuBar(JMenuBar1);
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(642,618);
		setVisible(false);
		String imageBase = System.getProperty("MESA.runtime");
		try {
			newIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL(
			    "file:///" + imageBase + "/gif/new.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ newIcon.move(168,480);
		try {
			openIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL(
			    "file:///" + imageBase + "/gif/open.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ openIcon.move(144,480);
		try {
			saveIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL(
			    "file:///" + imageBase + "/gif/save.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ saveIcon.move(120,480);
		try {
			cutIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL(
			    "file:///" + imageBase + "/gif/cut.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ cutIcon.move(96,480);
		try {
			copyIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL(
			    "file:///" + imageBase + "/gif/copy.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ copyIcon.move(72,480);
		try {
			pasteIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL(
			    "file:///" + imageBase + "/gif/paste.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ pasteIcon.move(48,480);
		try {
			aboutIcon.setImageLocation(symantec.itools.net.RelativeURL.getURL(
			    "file:///" + imageBase + "/gif/about.gif"));
		}
		catch (java.net.MalformedURLException error) { }
		//$$ aboutIcon.move(24,480);
		saveFileDialog.setMode(FileDialog.SAVE);
		saveFileDialog.setTitle("Save");
		//$$ saveFileDialog.move(48,504);
		openFileDialog.setMode(FileDialog.LOAD);
		openFileDialog.setTitle("Open");
		//$$ openFileDialog.move(24,504);
		JPanel2.setLayout(new FlowLayout(FlowLayout.LEFT,0,0));
		getContentPane().add(BorderLayout.NORTH, JPanel2);
		JPanel2.setBounds(0,0,642,17);
		JToolBar1.setAlignmentY(0.222222F);
		JPanel2.add(JToolBar1);
		JToolBar1.setBounds(0,0,283,17);
		newButton.setDefaultCapable(false);
		newButton.setToolTipText("Create a new document");
		newButton.setMnemonic((int)'N');
		JToolBar1.add(newButton);
		newButton.setBounds(16,4,35,11);
		openButton.setDefaultCapable(false);
		openButton.setToolTipText("Open an existing document");
		openButton.setMnemonic((int)'O');
		JToolBar1.add(openButton);
		openButton.setBounds(51,4,35,11);
		saveButton.setDefaultCapable(false);
		saveButton.setToolTipText("Save the active document");
		saveButton.setMnemonic((int)'S');
		JToolBar1.add(saveButton);
		saveButton.setBounds(86,4,35,11);
		JToolBar1.add(JToolBarSeparator1);
		JToolBarSeparator1.setBounds(121,2,10,5);
		cutButton.setDefaultCapable(false);
		cutButton.setToolTipText("Cut the selection and put it on the Clipboard");
		cutButton.setMnemonic((int)'T');
		JToolBar1.add(cutButton);
		cutButton.setBounds(131,4,35,11);
		copyButton.setDefaultCapable(false);
		copyButton.setToolTipText("Copy the selection and put it on the Clipboard");
		copyButton.setMnemonic((int)'C');
		JToolBar1.add(copyButton);
		copyButton.setBounds(166,4,35,11);
		pasteButton.setDefaultCapable(false);
		pasteButton.setToolTipText("Insert Clipboard contents");
		pasteButton.setMnemonic((int)'P');
		JToolBar1.add(pasteButton);
		pasteButton.setBounds(201,4,35,11);
		JToolBar1.add(JToolBarSeparator2);
		JToolBarSeparator2.setBounds(236,2,10,5);
		aboutButton.setDefaultCapable(false);
		aboutButton.setToolTipText("Display program information, version number and copyright");
		aboutButton.setMnemonic((int)'A');
		JToolBar1.add(aboutButton);
		aboutButton.setBounds(246,4,35,11);
		JPanel1.setAutoscrolls(true);
		JPanel1.setLayout(new BoxLayout(JPanel1,BoxLayout.X_AXIS));
		getContentPane().add(BorderLayout.CENTER, JPanel1);
		JPanel1.setBackground(new java.awt.Color(204,204,204));
		JPanel1.setBounds(0,17,642,601);
		JTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
		JPanel1.add(JTabbedPane1);
		JTabbedPane1.setBounds(0,0,642,601);
		patientPanel.setLayout(null);
		JTabbedPane1.add(patientPanel);
		patientPanel.setBounds(2,2,637,550);
		patientPanel.setVisible(false);
		generalStudyPanel.setLayout(null);
		JTabbedPane1.add(generalStudyPanel);
		generalStudyPanel.setBounds(2,2,637,550);
		generalStudyPanel.setVisible(false);
		srDocumentSeriesPanel.setLayout(null);
		JTabbedPane1.add(srDocumentSeriesPanel);
		srDocumentSeriesPanel.setBounds(2,2,637,550);
		srDocumentSeriesPanel.setVisible(false);
		generalEquipmentPanel.setLayout(null);
		JTabbedPane1.add(generalEquipmentPanel);
		generalEquipmentPanel.setBounds(2,2,637,550);
		generalEquipmentPanel.setVisible(false);
		srDocumentGeneralPanel.setLayout(null);
		JTabbedPane1.add(srDocumentGeneralPanel);
		srDocumentGeneralPanel.setBounds(2,2,637,550);
		srDocumentGeneralPanel.setVisible(false);
		srDocumentContent.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		JTabbedPane1.add(srDocumentContent);
		srDocumentContent.setBounds(2,2,637,550);
		srDocumentContent.setVisible(false);
		sopCommonPanel.setLayout(null);
		JTabbedPane1.add(sopCommonPanel);
		sopCommonPanel.setBounds(2,2,637,550);
		sopCommonPanel.setVisible(false);
		obsContextPanel.setLayout(null);
		JTabbedPane1.add(obsContextPanel);
		obsContextPanel.setBounds(2,2,637,550);
		obsContextPanel.setVisible(false);
		keyImageContentPanel.setLayout(null);
		JTabbedPane1.add(keyImageContentPanel);
		keyImageContentPanel.setBounds(2,2,637,550);
		keyImageContentPanel.setVisible(false);
		JTabbedPane1.setSelectedComponent(keyImageContentPanel);
		JTabbedPane1.setSelectedIndex(8);
		JTabbedPane1.setTitleAt(0,"Patient");
		JTabbedPane1.setTitleAt(1,"Gen Study");
		JTabbedPane1.setTitleAt(2,"SR Doc Series");
		JTabbedPane1.setTitleAt(3,"Gen Equip");
		JTabbedPane1.setTitleAt(4,"SR Doc General");
		JTabbedPane1.setTitleAt(5,"SR Doc Content");
		JTabbedPane1.setTitleAt(6,"SOP Common");
		JTabbedPane1.setTitleAt(7,"Observation Context");
		JTabbedPane1.setTitleAt(8,"Key Image Content");
		//$$ JMenuBar1.move(192,480);
		fileMenu.setText("File");
		fileMenu.setActionCommand("File");
		fileMenu.setMnemonic((int)'F');
		JMenuBar1.add(fileMenu);
		newItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.Event.CTRL_MASK));
		newItem.setText("New");
		newItem.setActionCommand("New");
		newItem.setMnemonic((int)'N');
		fileMenu.add(newItem);
		openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.Event.CTRL_MASK));
		openItem.setText("Open...");
		openItem.setActionCommand("Open...");
		openItem.setMnemonic((int)'O');
		fileMenu.add(openItem);
		saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.Event.CTRL_MASK));
		saveItem.setText("Save");
		saveItem.setActionCommand("Save");
		saveItem.setMnemonic((int)'S');
		fileMenu.add(saveItem);
		saveAsItem.setText("Save As...");
		saveAsItem.setActionCommand("Save As...");
		saveAsItem.setMnemonic((int)'A');
		fileMenu.add(saveAsItem);
		fileMenu.add(JSeparator1);
		exitItem.setText("Exit");
		exitItem.setActionCommand("Exit");
		exitItem.setMnemonic((int)'X');
		fileMenu.add(exitItem);
		editMenu.setText("Edit");
		editMenu.setActionCommand("Edit");
		editMenu.setMnemonic((int)'E');
		JMenuBar1.add(editMenu);
		cutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.Event.CTRL_MASK));
		cutItem.setText("Cut");
		cutItem.setActionCommand("Cut");
		cutItem.setMnemonic((int)'T');
		editMenu.add(cutItem);
		copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.Event.CTRL_MASK));
		copyItem.setText("Copy");
		copyItem.setActionCommand("Copy");
		copyItem.setMnemonic((int)'C');
		editMenu.add(copyItem);
		pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.Event.CTRL_MASK));
		pasteItem.setText("Paste");
		pasteItem.setActionCommand("Paste");
		pasteItem.setMnemonic((int)'P');
		editMenu.add(pasteItem);
		helpMenu.setText("Help");
		helpMenu.setActionCommand("Help");
		helpMenu.setMnemonic((int)'H');
		JMenuBar1.add(helpMenu);
		aboutItem.setText("About...");
		aboutItem.setActionCommand("About...");
		aboutItem.setMnemonic((int)'A');
		helpMenu.add(aboutItem);
		openItem.setIcon(openIcon);
		saveButton.setIcon(saveIcon);
		copyButton.setIcon(copyIcon);
		aboutButton.setIcon(aboutIcon);
		openButton.setIcon(openIcon);
		cutButton.setIcon(cutIcon);
		newButton.setIcon(newIcon);
		copyItem.setIcon(copyIcon);
		aboutItem.setIcon(aboutIcon);
		cutItem.setIcon(cutIcon);
		pasteItem.setIcon(pasteIcon);
		pasteButton.setIcon(pasteIcon);
		saveItem.setIcon(saveIcon);
		newItem.setIcon(newIcon);
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		openItem.addActionListener(lSymAction);
		saveItem.addActionListener(lSymAction);
		exitItem.addActionListener(lSymAction);
		aboutItem.addActionListener(lSymAction);
		openButton.addActionListener(lSymAction);
		saveButton.addActionListener(lSymAction);
		aboutButton.addActionListener(lSymAction);
		
	    mPatientModulePanel = new PatientModulePanel();
	    patientPanel.add(mPatientModulePanel);
	    mGeneralStudyModulePanel = new GeneralStudyModulePanel();
	    generalStudyPanel.add(mGeneralStudyModulePanel);

	    mSRDocumentSeriesModulePanel = new SRDocumentSeriesModulePanel();
	    srDocumentSeriesPanel.add(mSRDocumentSeriesModulePanel);
	    mSOPCommonModulePanel = new SOPCommonModulePanel();
	    mSOPCommonModulePanel.addEntry(
	        "1.2.840.10008.5.1.4.1.1.88.11", "Basic Text SR");
	    mSOPCommonModulePanel.addEntry(
	        "1.2.840.10008.5.1.4.1.1.88.22", "Enhanced SR");
	    mSOPCommonModulePanel.addEntry(
	        "1.2.840.10008.5.1.4.1.1.88.33", "Comprehensive");
	    sopCommonPanel.add(mSOPCommonModulePanel);
	    
	    mGeneralEquipmentModulePanel = new GeneralEquipmentModulePanel();
	    generalEquipmentPanel.add(mGeneralEquipmentModulePanel);

        mSRDocumentGeneralModulePanel = new SRDocumentGeneralModulePanel();
        mSRDocumentGeneralModulePanel.initialize("sr/verifying_observer.txt");
        srDocumentGeneralPanel.add(mSRDocumentGeneralModulePanel);

        mIHEY2ObsContextPanel = new IHEY2ObsContextPanel();
        mIHEY2ObsContextPanel.loadCodes("sr/obs_context_concept_name.txt",
                "sr/obs_context_types.txt", "sr/obs_context_coded_entry.txt");
        obsContextPanel.add(mIHEY2ObsContextPanel);

        mKeyImageContent = new KeyImageContent();
        mKeyImageContent.loadDocumentTitles("sr/doc_title.txt");
        mKeyImageContent.loadKeyImages(args);
        keyImageContentPanel.add(mKeyImageContent);
        
        if (args.length > 0) {
            DICOMWrapper w = new DICOMWrapper(args[0]);
            DICOM.InfoObj.CompositeFactory factory =
                new DICOM.InfoObj.CompositeFactory();
            loadPanels(factory, w);
        }
		//}}
	}

    /**
     * Creates a new instance of JFrame1 with the given title.
     * @param sTitle the title for the new frame.
     * @see #JFrame1()
     */
	//public KeyImageNote(String sTitle)
	//{
	//    String args[];
	//	setTitle(sTitle);
	//}
	
	/**
	 * The entry point for this application.
	 * Sets the Look and Feel to the System Look and Feel.
	 * Creates a new JFrame1 and makes it visible.
	 */
	static public void main(String args[])
	{
		try {
		    // Add the following code if you want the Look and Feel
		    // to be set to the Look and Feel of the native system.
		    /*
		    try {
		        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		    } 
		    catch (Exception e) { 
		    }
		    */

			//Create a new instance of our application's frame, and make it visible.
			(new KeyImageNote(args)).setVisible(true);
		} 
		catch (Throwable t) {
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}

    /**
     * Notifies this component that it has been added to a container
     * This method should be called by <code>Container.add</code>, and 
     * not by user code directly.
     * Overridden here to adjust the size of the frame if needed.
     * @see java.awt.Container#removeNotify
     */
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();
		
		super.addNotify();
		
		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;
		
		// Adjust size of frame according to the insets and menu bar
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
		    menuBarHeight = menuBar.getPreferredSize().height;
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	com.symantec.itools.javax.swing.icons.ImageIcon newIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon openIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon saveIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon cutIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon copyIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon pasteIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	com.symantec.itools.javax.swing.icons.ImageIcon aboutIcon = new com.symantec.itools.javax.swing.icons.ImageIcon();
	java.awt.FileDialog saveFileDialog = new java.awt.FileDialog(this);
	java.awt.FileDialog openFileDialog = new java.awt.FileDialog(this);
	javax.swing.JPanel JPanel2 = new javax.swing.JPanel();
	javax.swing.JToolBar JToolBar1 = new javax.swing.JToolBar();
	javax.swing.JButton newButton = new javax.swing.JButton();
	javax.swing.JButton openButton = new javax.swing.JButton();
	javax.swing.JButton saveButton = new javax.swing.JButton();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator1 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JButton cutButton = new javax.swing.JButton();
	javax.swing.JButton copyButton = new javax.swing.JButton();
	javax.swing.JButton pasteButton = new javax.swing.JButton();
	com.symantec.itools.javax.swing.JToolBarSeparator JToolBarSeparator2 = new com.symantec.itools.javax.swing.JToolBarSeparator();
	javax.swing.JButton aboutButton = new javax.swing.JButton();
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JTabbedPane JTabbedPane1 = new javax.swing.JTabbedPane();
	javax.swing.JPanel patientPanel = new javax.swing.JPanel();
	javax.swing.JPanel generalStudyPanel = new javax.swing.JPanel();
	javax.swing.JPanel srDocumentSeriesPanel = new javax.swing.JPanel();
	javax.swing.JPanel generalEquipmentPanel = new javax.swing.JPanel();
	javax.swing.JPanel srDocumentGeneralPanel = new javax.swing.JPanel();
	javax.swing.JPanel srDocumentContent = new javax.swing.JPanel();
	javax.swing.JPanel sopCommonPanel = new javax.swing.JPanel();
	javax.swing.JPanel obsContextPanel = new javax.swing.JPanel();
	javax.swing.JPanel keyImageContentPanel = new javax.swing.JPanel();
	javax.swing.JMenuBar JMenuBar1 = new javax.swing.JMenuBar();
	javax.swing.JMenu fileMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem newItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem openItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem saveItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem saveAsItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator1 = new javax.swing.JSeparator();
	javax.swing.JMenuItem exitItem = new javax.swing.JMenuItem();
	javax.swing.JMenu editMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem cutItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem copyItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem pasteItem = new javax.swing.JMenuItem();
	javax.swing.JMenu helpMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem aboutItem = new javax.swing.JMenuItem();
	//}}

	//{{DECLARE_MENUS
	//}}

	void exitApplication()
	{
		try {
	    	// Beep
	    	Toolkit.getDefaultToolkit().beep();
	    	// Show a confirmation dialog
	    	int reply = JOptionPane.showConfirmDialog(this, 
	    	                                          "Do you really want to exit?", 
	    	                                          "JFC Application - Exit" , 
	    	                                          JOptionPane.YES_NO_OPTION, 
	    	                                          JOptionPane.QUESTION_MESSAGE);
			// If the confirmation was affirmative, handle exiting.
			if (reply == JOptionPane.YES_OPTION)
			{
		    	this.setVisible(false);    // hide the Frame
		    	this.dispose();            // free the system resources
		    	System.exit(0);            // close the application
			}
		} catch (Exception e) {
		}
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == KeyImageNote.this)
				KeyImageNote_windowClosing(event);
		}
	}

	void KeyImageNote_windowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		KeyImageNote_windowClosing_Interaction1(event);
	}

	void KeyImageNote_windowClosing_Interaction1(java.awt.event.WindowEvent event) {
		try {
			this.exitApplication();
		} catch (Exception e) {
		}
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == openItem)
				openItem_actionPerformed(event);
			else if (object == saveItem)
				saveItem_actionPerformed(event);
			else if (object == exitItem)
				exitItem_actionPerformed(event);
			else if (object == aboutItem)
				aboutItem_actionPerformed(event);
			else if (object == openButton)
				openButton_actionPerformed(event);
			else if (object == saveButton)
				saveButton_actionPerformed(event);
			else if (object == aboutButton)
				aboutButton_actionPerformed(event);
			
			
		}
	}

	void openItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openItem_actionPerformed_Interaction1(event);
	}

	void openItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// openFileDialog Show the FileDialog
			openFileDialog.setVisible(true);
		} catch (Exception e) {
		}
	}

	void saveItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.

		saveItem_actionPerformed_Interaction1(event);
	}

	void saveItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// saveFileDialog Show the FileDialog
			saveFileDialog.setVisible(true);
		} catch (Exception e) {
		}
		String s = saveFileDialog.getFile();
		if (s == null)
		    return;
		saveFile(s);
	}

	void exitItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitItem_actionPerformed_Interaction1(event);
	}

	void exitItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			this.exitApplication();
		} catch (Exception e) {
		}
	}

	void aboutItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutItem_actionPerformed_Interaction1(event);
	}

	void aboutItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (Exception e) {
		}
	}

	void openButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		openButton_actionPerformed_Interaction1(event);
	}

	void openButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// openFileDialog Show the FileDialog
			openFileDialog.setVisible(true);
		} catch (Exception e) {
		}
	}

	void saveButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		saveButton_actionPerformed_Interaction1(event);
	}

	void saveButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// saveFileDialog Show the FileDialog
			saveFileDialog.setVisible(true);
		} catch (Exception e) {
		}
		String s = saveFileDialog.getFile();
		if (s == null)
		    return;
		saveFile(s);
	}

	void aboutButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutButton_actionPerformed_Interaction1(event);
	}

	void aboutButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (Exception e) {
		}
	}
	
	void saveFile(String s)
	{
		DICOM.SR.StructuredReport rpt = new DICOM.SR.StructuredReport();
		DICOM.InfoObj.CompositeFactory factory = new DICOM.InfoObj.CompositeFactory();
		setPatientModule(factory, rpt);
		setGeneralStudyModule(factory, rpt);
		setSRDocumentSeriesModule(factory, rpt);
		setSOPCommonModule(factory, rpt);
		setGeneralEquipmentModule(factory, rpt);
		setSRDocumentGeneralModule(factory, rpt);
		setSRContentModule(factory, rpt);
		rpt.writeFile(s);	    
	}
    void setPatientModule(DICOM.InfoObj.CompositeFactory factory,
                          DICOM.SR.StructuredReport rpt)
    {
        DICOM.Module.PatientModule p = mPatientModulePanel.getPatientModule();
        factory.setPatientModule(rpt, p);
    }
    void setGeneralStudyModule(DICOM.InfoObj.CompositeFactory factory,
                               DICOM.SR.StructuredReport rpt)
    {
        DICOM.Module.GeneralStudyModule s =
            mGeneralStudyModulePanel.getModule();
        factory.setGeneralStudyModule(rpt, s);
    }
    void setSRDocumentSeriesModule(DICOM.InfoObj.CompositeFactory factory,
                                   DICOM.SR.StructuredReport rpt)
    {
        DICOM.Module.SRDocumentSeriesModule s =
            mSRDocumentSeriesModulePanel.getModule();
        factory.setSRDocumentSeriesModule(rpt, s);
    }
    void setSOPCommonModule(DICOM.InfoObj.CompositeFactory factory,
                            DICOM.SR.StructuredReport rpt)
    {
        DICOM.Module.SOPCommonModule s =
            mSOPCommonModulePanel.getModule();
        factory.setSOPCommonModule(rpt, s);
    }
    void setGeneralEquipmentModule(DICOM.InfoObj.CompositeFactory factory,
                                   DICOM.SR.StructuredReport rpt)
    {
        DICOM.Module.GeneralEquipmentModule s =
            mGeneralEquipmentModulePanel.getModule();
        factory.setGeneralEquipmentModule(rpt, s);
    }

    void setSRDocumentGeneralModule(DICOM.InfoObj.CompositeFactory factory,
            DICOM.SR.StructuredReport rpt)
    {
        DICOM.Module.SRDocumentGeneralModule s =
            mSRDocumentGeneralModulePanel.getModule();
        factory.setSRDocumentGeneralModule(rpt, s);
    }
    void setSRContentModule(DICOM.InfoObj.CompositeFactory factory,
                            DICOM.SR.StructuredReport rpt)
    {
        DICOM.Code.CodeItem docTitle =
            mKeyImageContent.getDocumentTitle("sr/doc_title.txt");
        DICOM.Module.SRDocumentContentModule content =
            new DICOM.Module.SRDocumentContentModule(docTitle);


        java.util.Vector v = mIHEY2ObsContextPanel.observationContextVector();
        if (v != null) {
            int idx = 0;
            for (idx = 0; idx < v.size(); idx++) {
                DICOM.SR.ContentItem x =
                    (DICOM.SR.ContentItem)v.elementAt(idx);
                content.addContentItem(x);
            }
        }


        DICOM.SR.ContentItemFactory f = new DICOM.SR.ContentItemFactory();
        DICOM.Code.CodeItem textCode =
            new DICOM.Code.CodeItem("3002", "Key Image Text", "IHEY2");

        String reportText = mKeyImageContent.getReportText();
        DICOM.SR.ContentItem textContentItem =
            f.produceText(textCode, "CONTAINS", reportText);
        content.addContentItem(textContentItem);

        DICOM.Code.CodeItem imageCode =
            new DICOM.Code.CodeItem("4000", "Key Image List", "IHEY2");

        DICOM.SR.ContentItem imageContentItem =
            f.produceImage(imageCode, "CONTAINS");
        String fileNames[] = mKeyImageContent.getFileNames();
        addReferencedImages(imageContentItem, fileNames);
        
        content.addContentItem(imageContentItem);

        factory.setSRDocumentContentModule(rpt, content);
    }
    
    void loadPanels(DICOM.InfoObj.CompositeFactory f, DICOMWrapper w) {
        DICOM.Module.PatientModule m1 = f.getPatientModule(w);
        mPatientModulePanel.setPatientModule(m1);
        
        DICOM.Module.GeneralStudyModule m2 = f.getGeneralStudyModule(w);
        mGeneralStudyModulePanel.setModule(m2);
        
        DICOM.Module.GeneralEquipmentModule m3 =
            new DICOM.Module.GeneralEquipmentModule("IHE Labs");
        mGeneralEquipmentModulePanel.setModule(m3);
        
        DICOM.Module.SRDocumentSeriesModule m4 =
            new DICOM.Module.SRDocumentSeriesModule("SR", "", "");
        mSRDocumentSeriesModulePanel.setModule(m4);
    }
    void addReferencedImages(DICOM.SR.ContentItem item, String args[])
    {
        DICOMWrapper w = item.wrapper();
        w.addSequence(0x00081199);
        int i = 0;
        for (i = 0; i < args.length; i++) {
            DICOM.DICOMWrapper x = new DICOM.DICOMWrapper(args[i]);
            String sopClass = x.getString((short)0x0008, (short)0x0016);
            String instUID = x.getString((short)0x0008, (short)0x0018);
            w.setString(0x00081199, 0x00081150, sopClass, i);
            w.setString(0x00081199, 0x00081155, instUID, i);
        }
    }
}
